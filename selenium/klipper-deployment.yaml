apiVersion: v1
kind: Namespace
metadata:
  name: klippertele
---
apiVersion: v1
kind: Service
metadata:
  name: klipper
  namespace: klippertele
  labels:
    app: klipper
spec:
  type: ClusterIP
  selector:
    app: klipper
  ports:
    - port: 80
      targetPort: klipper-port
      protocol: TCP
      name: klipper-svc
---
apiVersion: v1
kind: Service
metadata:
  name: telegram
  namespace: klippertele
  labels:
    app: telegram
spec:
  type: ClusterIP
  selector:
    app: telegram
  ports:
    - port: 80
      targetPort: telegram-port
      protocol: TCP
      name: telegram-svc
---
apiVersion: v1
kind: Service
metadata:
  name: telegram-canary
  namespace: klippertele
  labels:
    app: telegram
spec:
  type: ClusterIP
  selector:
    app: telegram
  ports:
    - port: 80
      targetPort: telegram-port
      protocol: TCP
      name: telegram-svc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: klipper-deployment
  namespace: klippertele
  labels:
    app: klipper
spec:
  replicas: 3
  selector:
    matchLabels:
      app: klipper
  template:
    metadata:
      name: klipper
      labels:
        app: klipper
      annotations:
        linkerd.io/inject: "enabled"
    spec:
      containers:
        - name: klipper
          image: majestry/klipper:latest
          imagePullPolicy: Always
          resources:
            limits:
              cpu: "170m"
              memory: "300Mi"
          ports:
            - containerPort: 80
              name: klipper-port
          readinessProbe:
            initialDelaySeconds: 60
            timeoutSeconds: 10
            periodSeconds: 20
            httpGet:
              port: 80
              path: /actuator/health
          livenessProbe:
            initialDelaySeconds: 60
            timeoutSeconds: 10
            periodSeconds: 20
            httpGet:
              port: 80
              path: /actuator/health
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 80
            failureThreshold: 15
            periodSeconds: 10
      restartPolicy: Always
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegram-env
  namespace: klippertele
data:
  KLIPPER_HOSTNAME: "klipper"
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: telegram-deployment
#  namespace: klippertele
#  labels:
#    app: telegram
#spec:
#  replicas: 3
#  selector:
#    matchLabels:
#      app: telegram
#  template:
#    metadata:
#      name: telegram
#      labels:
#        app: telegram
#      annotations:
#        linkerd.io/inject: "enabled"
#    spec:
#      containers:
#        - name: telegram
#          image: majestry/telegram:latest
#          imagePullPolicy: Always
#          envFrom:
#            - configMapRef:
#                name: telegram-env
#          resources:
#            limits:
#              cpu: "300m"
#              memory: "300Mi"
#          ports:
#            - containerPort: 8080
#              name: telegram-port
#          readinessProbe:
#            initialDelaySeconds: 20
#            timeoutSeconds: 10
#            periodSeconds: 20
#            httpGet:
#              port: 8080
#              path: /actuator/health
#          livenessProbe:
#            initialDelaySeconds: 20
#            timeoutSeconds: 10
#            periodSeconds: 20
#            httpGet:
#              port: 8080
#              path: /actuator/health
#          startupProbe:
#            httpGet:
#              path: /actuator/health
#              port: 8080
#            failureThreshold: 10
#            periodSeconds: 10
#      restartPolicy: Always
#  strategy:
#    type: RollingUpdate
#    rollingUpdate:
#      maxUnavailable: 1
#      maxSurge: 1
##---
##apiVersion: apps/v1
##kind: Deployment
##metadata:
##  name: telegram-canary-deployment
##  namespace: klippertele
##  labels:
##    app: telegram
##spec:
##  replicas: 1
##  selector:
##    matchLabels:
##      app: telegram-canary
##  template:
##    metadata:
##      name: telegram-canary
##      labels:
##        app: telegram-canary
##      annotations:
##        linkerd.io/inject: "enabled"
##    spec:
##      containers:
##        - name: telegram-canary
##          image: majestry/telegram:0.4.1
##          imagePullPolicy: Always
##          envFrom:
##            - configMapRef:
##                name: telegram-env
##          resources:
##            limits:
##              cpu: "250m"
##              memory: "300Mi"
##          ports:
##            - containerPort: 8080
##              name: telegram-port
##          readinessProbe:
##            initialDelaySeconds: 20
##            timeoutSeconds: 10
##            periodSeconds: 20
##            httpGet:
##              port: 8080
##              path: /actuator/health
##          livenessProbe:
##            initialDelaySeconds: 20
##            timeoutSeconds: 10
##            periodSeconds: 20
##            httpGet:
##              port: 8080
##              path: /actuator/health
##          startupProbe:
##            httpGet:
##              path: /actuator/health
##              port: 8080
##            failureThreshold: 10
##            periodSeconds: 10
##      restartPolicy: Always
##  strategy:
##    type: RollingUpdate
##    rollingUpdate:
##      maxUnavailable: 1
##      maxSurge: 1
##---
##apiVersion: v1
##kind: Service
##metadata:
##  name: telegram-canary
##  namespace: klippertele
##  labels:
##    app: telegram-canary
##spec:
##  type: ClusterIP
##  selector:
##    app: telegram-canary
##  ports:
##    - port: 80
##      targetPort: telegram-port
##      protocol: TCP
##      name: telegram-svc
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: klippertele
  name: klipper-ingress
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
    - host: "majestry.example.com"
      http:
        paths:
          - path: /klipper(/|$)(.*)
            backend:
              service:
                name: klipper
                port:
                  name: klipper-svc
            pathType: Prefix
          - path: /telegram(/|$)(.*)
            backend:
              service:
                name: telegram
                port:
                  name: telegram-svc
            pathType: Prefix
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  namespace: klippertele
#  name: klipper-ingress-canary
#  annotations:
#    nginx.ingress.kubernetes.io/use-regex: "true"
#    nginx.ingress.kubernetes.io/rewrite-target: /$2
#    nginx.ingress.kubernetes.io/canary: "true"
#    nginx.ingress.kubernetes.io/canary-weight: "30"
#spec:
#  ingressClassName: nginx
#  rules:
#    - host: "majestry.example.com"
#      http:
#        paths:
#          - path: /telegram(/|$)(.*)
#            backend:
#              service:
#                name: telegram-canary
#                port:
#                  name: telegram-svc
#            pathType: Prefix
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: telegram-rollout
  namespace: klippertele
  labels:
    app: telegram
spec:
  replicas: 3
  selector:
    matchLabels:
      app: telegram
  template:
    metadata:
      labels:
        app: telegram
      annotations:
        linkerd.io/inject: "enabled"
    spec:
      containers:
        - name: telegram
          image: majestry/telegram:latest
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: telegram-env
          resources:
            limits:
              cpu: "125m"
              memory: "300Mi"
          ports:
            - containerPort: 8080
              name: telegram-port
          readinessProbe:
            initialDelaySeconds: 20
            timeoutSeconds: 10
            periodSeconds: 20
            httpGet:
              port: 8080
              path: /actuator/health
          livenessProbe:
            initialDelaySeconds: 20
            timeoutSeconds: 10
            periodSeconds: 20
            httpGet:
              port: 8080
              path: /actuator/health
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            failureThreshold: 15
            periodSeconds: 10
      restartPolicy: Always
  strategy:
    canary:
      maxSurge: "34%"
      stableService: telegram
      canaryService: telegram-canary
      maxUnavailable: 0
      steps:
        - setWeight: 34
        - pause:
            duration: 30m
        - setWeight: 67
        - pause:
            duration: 30m
        - setWeight: 100
      dynamicStableScale: true
      trafficRouting:
        nginx:
          stableIngress: klipper-ingress


